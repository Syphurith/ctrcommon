[1mdiff --git a/include/ctrcommon/app.hpp b/include/ctrcommon/app.hpp[m
[1mindex d29d70e..d6c861e 100644[m
[1m--- a/include/ctrcommon/app.hpp[m
[1m+++ b/include/ctrcommon/app.hpp[m
[36m@@ -31,6 +31,8 @@[m [mtypedef struct {[m
     MediaType mediaType;[m
     AppPlatform platform;[m
     AppCategory category;[m
[32m+[m[32m    u16 version;[m
[32m+[m[32m    u64 size;[m
 } App;[m
 [m
 typedef enum {[m
[1mdiff --git a/include/ctrcommon/platform.hpp b/include/ctrcommon/platform.hpp[m
[1mindex d4ea4c5..947d7f5 100644[m
[1m--- a/include/ctrcommon/platform.hpp[m
[1m+++ b/include/ctrcommon/platform.hpp[m
[36m@@ -193,6 +193,7 @@[m [mu32 platformGetDeviceId();[m
 u64 platformGetTime();[m
 void platformDelay(int ms);[m
 void platformPrintf(const char* format, ...);[m
[32m+[m[32mbool platformAddNotification(const std::u16string title, const std::u16string message);[m
 Error platformGetError();[m
 void platformSetError(Error error);[m
 std::string platformGetErrorString(Error error);[m
[1mdiff --git a/source/ctrcommon/app.cpp b/source/ctrcommon/app.cpp[m
[1mindex 6f7de80..c91aff5 100644[m
[1m--- a/source/ctrcommon/app.cpp[m
[1m+++ b/source/ctrcommon/app.cpp[m
[36m@@ -123,14 +123,21 @@[m [mstd::vector<App> appList(MediaType mediaType) {[m
     }[m
 [m
     u64 titleIds[titleCount];[m
[31m-    Result titleListResult = AM_GetTitleIdList(appMediatypeToByte(mediaType), titleCount, titleIds);[m
[32m+[m[32m    Result titleIdsResult = AM_GetTitleIdList(appMediatypeToByte(mediaType), titleCount, titleIds);[m
[32m+[m[32m    if(titleIdsResult != 0) {[m
[32m+[m[32m        platformSetError(serviceParseError((u32) titleIdsResult));[m
[32m+[m[32m        return titles;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    TitleList titleList[titleCount];[m
[32m+[m[32m    Result titleListResult = AM_ListTitles(appMediatypeToByte(mediaType), titleCount, titleIds, titleList);[m
     if(titleListResult != 0) {[m
         platformSetError(serviceParseError((u32) titleListResult));[m
         return titles;[m
     }[m
 [m
     for(u32 i = 0; i < titleCount; i++) {[m
[31m-        u64 titleId = titleIds[i];[m
[32m+[m[32m        u64 titleId = titleList[i].titleID;[m
         App app;[m
         app.titleId = titleId;[m
         app.uniqueId = ((u32*) &titleId)[0];[m
[36m@@ -142,6 +149,8 @@[m [mstd::vector<App> appList(MediaType mediaType) {[m
         app.mediaType = mediaType;[m
         app.platform = appPlatformFromId(((u16 *) &titleId)[3]);[m
         app.category = appCategoryFromId(((u16 *) &titleId)[2]);[m
[32m+[m[32m        app.version = titleList[i].titleVersion;[m
[32m+[m[32m        app.size = titleList[i].size;[m
 [m
         titles.push_back(app);[m
     }[m
[1mdiff --git a/source/ctrcommon/platform.cpp b/source/ctrcommon/platform.cpp[m
[1mindex 475f715..a41d9e3 100644[m
[1m--- a/source/ctrcommon/platform.cpp[m
[1m+++ b/source/ctrcommon/platform.cpp[m
[36m@@ -76,6 +76,19 @@[m [mvoid platformPrintf(const char* format, ...) {[m
     svcOutputDebugString(buffer, strlen(buffer));[m
 }[m
 [m
[32m+[m[32mbool platformAddNotification(const std::u16string title, const std::u16string message) {[m
[32m+[m[32m    if(!serviceRequire("news")) {[m
[32m+[m[32m        return false;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    Result result = NEWSU_AddNotification((const u16*) title.c_str(), title.length(), (const u16*) message.c_str(), message.length(), NULL, 0, false);[m
[32m+[m[32m    if(result != 0) {[m
[32m+[m[32m        platformSetError(serviceParseError((u32) result));[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    return result == 0;[m
[32m+[m[32m}[m
[32m+[m
 Error platformGetError() {[m
     Error error = *currentError;[m
     if(currentError != NULL) {[m
[36m@@ -360,8 +373,10 @@[m [mstd::string platformGetErrorString(Error error) {[m
             result << "Application";[m
             break;[m
         case MODULE_INVALID:[m
[32m+[m[32m            result << "Invalid result";[m
[32m+[m[32m            break;[m
         default:[m
[31m-            result << "Invalid module";[m
[32m+[m[32m            result << "Unknown module";[m
             break;[m
     }[m
 [m
[36m@@ -397,7 +412,7 @@[m [mstd::string platformGetErrorString(Error error) {[m
             result << "Fatal";[m
             break;[m
         default:[m
[31m-            result << "Invalid level";[m
[32m+[m[32m            result << "Unknown level";[m
             break;[m
     }[m
 [m
[36m@@ -442,8 +457,10 @@[m [mstd::string platformGetErrorString(Error error) {[m
             result << "Internal";[m
             break;[m
         case SUMMARY_INVALID:[m
[32m+[m[32m            result << "Invalid result";[m
[32m+[m[32m            break;[m
         default:[m
[31m-            result << "Invalid summary";[m
[32m+[m[32m            result << "Unknown summary";[m
             break;[m
     }[m
 [m
[36m@@ -599,8 +616,10 @@[m [mstd::string platformGetErrorString(Error error) {[m
             result << "Timeout";[m
             break;[m
         case DESCRIPTION_INVALID:[m
[32m+[m[32m            result << "Invalid result";[m
[32m+[m[32m            break;[m
         default:[m
[31m-            result << "Invalid description";[m
[32m+[m[32m            result << "Unknown description";[m
             break;[m
     }[m
 [m
[1mdiff --git a/source/ctrcommon/service.cpp b/source/ctrcommon/service.cpp[m
[1mindex 8f16d2c..246a257 100644[m
[1m--- a/source/ctrcommon/service.cpp[m
[1m+++ b/source/ctrcommon/service.cpp[m
[36m@@ -66,9 +66,12 @@[m [mbool serviceRequire(const std::string service) {[m
     } else if(service.compare("csnd") == 0) {[m
         result = csndInit();[m
         cleanup = &csndExit;[m
[32m+[m[32m    } else if(service.compare("news") == 0) {[m
[32m+[m[32m        result = newsInit();[m
[32m+[m[32m        cleanup = &newsExit;[m
     } else if(service.compare("kernel") == 0) {[m
         result = khaxInit();[m
[31m-        cleanup = NULL;[m
[32m+[m[32m        cleanup = &khaxExit;[m
     } else {[m
         if(!platformIsNinjhax() || serviceRequire("kernel")) {[m
             if(service.compare("am") == 0) {[m
[1mdiff --git a/source/ctrcommon/ui.cpp b/source/ctrcommon/ui.cpp[m
[1mindex 8e59dbc..8ff1ca7 100644[m
[1m--- a/source/ctrcommon/ui.cpp[m
[1m+++ b/source/ctrcommon/ui.cpp[m
[36m@@ -1,5 +1,7 @@[m
 #include "ctrcommon/ui.hpp"[m
 [m
[32m+[m[32m#include "ctrcommon/app.hpp"[m
[32m+[m[32m#include "ctrcommon/fs.hpp"[m
 #include "ctrcommon/input.hpp"[m
 #include "ctrcommon/platform.hpp"[m
 #include "ctrcommon/socket.hpp"[m
[36m@@ -14,7 +16,6 @@[m
 #include <iomanip>[m
 #include <sstream>[m
 #include <stack>[m
[31m-#include <ctrcommon/fs.hpp>[m
 [m
 struct uiAlphabetize {[m
     inline bool operator()(SelectableElement a, SelectableElement b) {[m
[36m@@ -276,10 +277,16 @@[m [mvoid uiGetApps(std::vector<SelectableElement> &elements, std::vector<App> apps)[m
         App app = *it;[m
 [m
         std::stringstream titleId;[m
[31m-        titleId << std::setfill('0') << std::setw(16) << std::hex << app.titleId;[m
[32m+[m[32m        titleId << "0x" << std::setfill('0') << std::setw(16) << std::hex << app.titleId;[m
 [m
         std::stringstream uniqueId;[m
[31m-        uniqueId << std::setfill('0') << std::setw(8) << std::hex << app.uniqueId;[m
[32m+[m[32m        uniqueId << "0x" << std::setfill('0') << std::setw(8) << std::hex << app.uniqueId;[m
[32m+[m
[32m+[m[32m        std::stringstream version;[m
[32m+[m[32m        version << "0x" << std::setfill('0') << std::hex << app.version;[m
[32m+[m
[32m+[m[32m        std::stringstream size;[m
[32m+[m[32m        size << "" << app.size << " bytes (" << std::fixed << std::setprecision(2) << app.size / 1024.0f / 1024.0f << "MB)";[m
 [m
         std::vector<std::string> details;[m
         details.push_back("Title ID: " + titleId.str());[m
[36m@@ -287,6 +294,8 @@[m [mvoid uiGetApps(std::vector<SelectableElement> &elements, std::vector<App> apps)[m
         details.push_back("Product Code: " + std::string(app.productCode));[m
         details.push_back("Platform: " + appGetPlatformName(app.platform));[m
         details.push_back("Category: " + appGetCategoryName(app.category));[m
[32m+[m[32m        details.push_back("Version: " + version.str());[m
[32m+[m[32m        details.push_back("Size: " + size.str());[m
 [m
         elements.push_back({titleId.str(), app.productCode, details});[m
     }[m
